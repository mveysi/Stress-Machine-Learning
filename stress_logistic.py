# -*- coding: utf-8 -*-
"""p7_stress.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tqwl-g_ld4VaNRqwXowmY8qEBk5Bqsjm
"""

import joblib
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from sklearn.metrics import accuracy_score, roc_auc_score, classification_report
from sklearn.model_selection import train_test_split, GridSearchCV, cross_validate, cross_val_score, validation_curve
from lightgbm import LGBMClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, AdaBoostClassifier
from sklearn.linear_model import LogisticRegression

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from catboost import CatBoostClassifier
import warnings


pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/Stress-Lysis.csv")

def check_df(dataframe):
    print("##################### Shape #####################")
    print(dataframe.shape)
    print("##################### Types #####################")
    print(dataframe.dtypes)
    print("##################### Head #####################")
    print(dataframe.head())
    print("##################### Tail #####################")
    print(dataframe.tail())
    print("##################### NA #####################")
    print(dataframe.isnull().sum())
    print("##################### Quantiles #####################")
    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)

check_df(df)

"""Veriye İlk Bakış:

1. 4 değişkenimiz ve 2001 değerimiz vardır.
2. Boş değerimiz yoktur.
3. Aykırı değer yok gibi gözüküyor.

"""

def grab_col_names(dataframe, cat_th=10, car_th=20):
  cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]
  num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and
                 dataframe[col].dtypes != "O"]
  cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and
                 dataframe[col].dtypes == "O"]

  cat_cols = cat_cols + num_but_cat
  cat_cols = [col for col in cat_cols if col not in cat_but_car]

  num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O" ]
  num_cols = [col for col in num_cols if col not in num_but_cat]

  print(f"Observations: {dataframe.shape[0]}")
  print(f"Variables: {dataframe.shape[1]}")
  print(f'cat_cols: {len(cat_cols)}')
  print(f'num_cols: {len(num_cols)}')
  print(f'cat_but_car: {len(cat_but_car)}')
  print(f'num_but_cat: {len(num_but_cat)}')
  return cat_cols, num_cols,num_but_cat

cat_cols, num_cols, cat_but_car = grab_col_names(df)

print(cat_cols)
print(num_cols)

df["Stress Level"].value_counts()

#Numerik değişken analizi
def num_summary(dataframe, numerical_col, plot=False):
  quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]
  print(dataframe[numerical_col].describe(quantiles).T)
  if plot:
    dataframe[numerical_col].hist(bins=20)
    plt.xlabel(numerical_col)
    plt.title(numerical_col)
    plt.show(block=True)

for col in num_cols:
  num_summary(df, col, plot=True)

#Kategorik değişkenim sadece hedef değişken olduğu için bakmıyorum.
#Hedef değişkenin numerik değişkenlere göre analizi.
def target_summary_with_num(dataframe, target, numerical_col):
    print(dataframe.groupby(target).agg({numerical_col: "mean"}), end="\n\n\n")

for col in num_cols:
    target_summary_with_num(df, "Stress Level", col)

#Korelasyon analizi
corr = df[num_cols].corr()

sns.set(rc={'figure.figsize': (5,5)})
sns.heatmap(corr, cmap="RdBu", annot=True)
plt.show()

#Aykırı değer analizi
def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):
  quartile1 = dataframe[col_name].quantile(q1)
  quartile3 = dataframe[col_name].quantile(q3)
  interquantile_range = quartile3 - quartile1
  up_limit = quartile3 + 1.5*interquantile_range
  low_limit = quartile1 - 1.5*interquantile_range
  return low_limit, up_limit

def check_outlier(dataframe, col_name):
  low_limit, up_limit = outlier_thresholds(dataframe, col_name)
  if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
    return True
  else:
    return False

for col in num_cols:
    print(col, check_outlier(df, col))

"""Herhangi bir aykırı değerimiz yoktur. Devam ediyoruz..."""

#Standartlaştırma yapıyoruz.
scaler = StandardScaler()
df[num_cols] = scaler.fit_transform(df[num_cols])
df.head(10)

dff = df.copy()

y = dff["Stress Level"]
X = dff.drop("Stress Level", axis=1)


X_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.20, random_state=42)

models = [('LR', LogisticRegression()),
          ('KNN', KNeighborsClassifier()),
          ('CART', DecisionTreeClassifier()),
          ('RF', RandomForestClassifier()),
          ('GBM', GradientBoostingClassifier()),
          ('Adaboost', AdaBoostClassifier()),
          ("XGBoost", XGBClassifier(objective='reg:squarederror')),
          ("CatBoost", CatBoostClassifier(verbose=False))]

for name, model in models:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        msg = "%s: (%f)" % (name, accuracy)
        print(msg)

y = df["Stress Level"]
X = df.drop(["Stress Level"], axis = 1)

X_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.20, random_state=42)

LR_model = LogisticRegression(random_state=42).fit(X_train, y_train)
y_pred = LR_model.predict(X_test)
y_prob = LR_model.predict_proba(X_test)[:, 1]

print(classification_report(y_test, y_pred))

"""Test verilerinden rastgele birisini alıp bu modeli test ediyoruz."""

random_user  =X.sample(10)
random_user

LR_model.predict(random_user)

"""2. model testi için kullanıyoruz(opsiyonel)"""

y_pred = LR_model.predict(X)

y_pred[0:10]

y[0:10]

